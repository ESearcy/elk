input {
  beats {
    port => 5044
  }
}

filter {

  if [type] == "pipeline-application" {
    multiline {
      pattern => "(^%{TIMESTAMP_ISO8601} %{LOGLEVEL})"
      negate => true
      what => "previous"
    }
    if "_grokparsefailure" in [tags] {
    drop {}
  }
  grok {
    match => ["message", "%{TIMESTAMP_ISO8601:sourceTimestamp} %{LOGLEVEL:logLevel} %{GREEDYDATA:message}"]
  }
}
if [type] == "hiveserver2" {
  multiline {
    pattern => "(^%{TIMESTAMP_ISO8601} %{LOGLEVEL})"
    negate => true
    what => "previous"
  }
  if "_grokparsefailure" in [tags] {
  drop { }
}
grok {
  match => ["message","%{TIMESTAMP_ISO8601:sourceTimestamp} %{LOGLEVEL:logLevel} %{GREEDYDATA:message}"]
}
}
if [type] == "hivemetastore" {
  multiline {
    pattern => "(^%{TIMESTAMP_ISO8601} %{LOGLEVEL})"
    negate => true
    what => "previous"
  }
  if "_grokparsefailure" in [tags] {
  drop { }
  }
  grok {
    match => ["message","%{TIMESTAMP_ISO8601:sourceTimestamp} %{LOGLEVEL:logLevel} %{GREEDYDATA:message}"]
  }
}
if [type] == "webhcat" {
  multiline {
    pattern => "(^\A%{LOGLEVEL}\s \| (?<sourceTimestamp>%{MONTHDAY} %{MONTH} %{YEAR} %{HOUR}:%{MINUTE}:%{SECOND}) \|%{GREEDYDATA})"
    negate => true
    what => "previous"
  }
  if "_grokparsefailure" in [tags] {
  drop { }
  }
  grok {
    match => ["message","\A%{LOGLEVEL:logLevel}\s \| (?<sourceTimestamp>%{MONTHDAY} %{MONTH} %{YEAR} %{HOUR}:%{MINUTE}:%{SECOND}) \|%{GREEDYDATA:message}"]
  }
}
if [type] == "knox" and [subType] == "main" {
  multiline {
    pattern => "(^%{TIMESTAMP_ISO8601} %{LOGLEVEL})"
    negate => true
    what => "previous"
  }
  if "_grokparsefailure" in [tags] {
  drop { }
  }
  grok {
    match => ["message","%{TIMESTAMP_ISO8601:sourceTimestamp} %{LOGLEVEL:logLevel} %{GREEDYDATA:message}"]
  }
}
if [type] == "knox" and [subType] == "gateway-audit" {
  multiline {
    pattern => "(^(?<sourceTimestamp>%{YEAR}/%{MONTHDAY}/%{MONTHDAY} %{HOUR}:%{MINUTE}:%{SECOND}))"
    negate => true
    what => "previous"
  }
  if "_grokparsefailure" in [tags] {
  drop { }
  }
  grok {
    match => ["message","(?<sourceTimestamp>%{YEAR}/%{MONTHDAY}/%{MONTHDAY} %{HOUR}:%{MINUTE}:%{SECOND}) %{GREEDYDATA:message}"]
  }
}
if [type] == "zookeeper" {
  multiline {
    pattern => "(^%{TIMESTAMP_ISO8601} - %{LOGLEVEL})"
    negate => true
    what => "previous"
  }
  if "_grokparsefailure" in [tags] {
  drop { }
  }
  grok {
    match => ["message","%{TIMESTAMP_ISO8601:sourceTimestamp} - %{LOGLEVEL:logLevel} %{GREEDYDATA:message}"]
  }
}

}

output {
elasticsearch {
  hosts => ["elasticsearch:9200"]
      index => "%{[@metadata][beat]}-%{+YYYY.MM.dd}"
      document_type => "%{[@metadata][type]}"
  }
}